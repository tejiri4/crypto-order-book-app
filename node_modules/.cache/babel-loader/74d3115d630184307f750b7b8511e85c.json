{"ast":null,"code":"var WebSocketClient = require('websocket').client;\n\nvar client = new WebSocketClient();\n\nconst webSocketSetup = async ({\n  text,\n  currencyPair,\n  callBack\n}) => {\n  client.on('connectFailed', function (error) {\n    console.log('Connect Error: ' + error.toString());\n  });\n  client.on('connect', function (connection) {\n    console.log('WebSocket Client Connected');\n    connection.on('error', function (error) {\n      console.log(\"Connection Error: \" + error.toString());\n    });\n    connection.on('close', function () {\n      console.log('echo-protocol Connection Closed');\n    });\n    connection.on('message', function (message) {\n      if (message.type === 'utf8') {\n        console.log(\"Received: '\" + message.utf8Data + \"'\");\n      }\n    });\n\n    function sendNumber() {\n      if (connection.connected) {\n        var number = Math.round(Math.random() * 0xFFFFFF);\n        connection.sendUTF(number.toString());\n        setTimeout(sendNumber, 1000);\n      }\n    }\n\n    sendNumber();\n  });\n  client.connect('ws://localhost:8080/', 'echo-protocol'); // console.log(text, currencyPair);\n  // let ws = new WebSocket('wss://ws.bitstamp.net/');\n  // ws.onopen = () => {\n  //   //Subscribe to the channel\n  //   ws.send(JSON.stringify({ event: `bts:${text}`, data: { channel: `order_book_${currencyPair}` } }))\n  // }\n  // ws.onmessage = (msg) => {\n  //   console.log(msg, '=============>');\n  //   // callBack && callBack(JSON.parse(msg.data));\n  // }\n  // ws.onerror = error => {\n  //   console.log(`WebSocket error: ${error}`)\n  // }\n};\n\nexport default webSocketSetup;","map":{"version":3,"sources":["/Users/tejirimatthew/crypto-order-book-app/src/utils/webSocketSetup.js"],"names":["WebSocketClient","require","client","webSocketSetup","text","currencyPair","callBack","on","error","console","log","toString","connection","message","type","utf8Data","sendNumber","connected","number","Math","round","random","sendUTF","setTimeout","connect"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,MAA3C;;AAEA,IAAIA,MAAM,GAAG,IAAIF,eAAJ,EAAb;;AAKA,MAAMG,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAD4B;AAE5BC,EAAAA,YAF4B;AAG5BC,EAAAA;AAH4B,CAAP,KAIjB;AAEJJ,EAAAA,MAAM,CAACK,EAAP,CAAU,eAAV,EAA2B,UAAUC,KAAV,EAAiB;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBF,KAAK,CAACG,QAAN,EAAhC;AACD,GAFD;AAIAT,EAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAqB,UAAUK,UAAV,EAAsB;AACzCH,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAE,IAAAA,UAAU,CAACL,EAAX,CAAc,OAAd,EAAuB,UAAUC,KAAV,EAAiB;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBF,KAAK,CAACG,QAAN,EAAnC;AACD,KAFD;AAGAC,IAAAA,UAAU,CAACL,EAAX,CAAc,OAAd,EAAuB,YAAY;AACjCE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACD,KAFD;AAGAE,IAAAA,UAAU,CAACL,EAAX,CAAc,SAAd,EAAyB,UAAUM,OAAV,EAAmB;AAC1C,UAAIA,OAAO,CAACC,IAAR,KAAiB,MAArB,EAA6B;AAC3BL,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBG,OAAO,CAACE,QAAxB,GAAmC,GAA/C;AACD;AACF,KAJD;;AAMA,aAASC,UAAT,GAAsB;AACpB,UAAIJ,UAAU,CAACK,SAAf,EAA0B;AACxB,YAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,CAAb;AACAT,QAAAA,UAAU,CAACU,OAAX,CAAmBJ,MAAM,CAACP,QAAP,EAAnB;AACAY,QAAAA,UAAU,CAACP,UAAD,EAAa,IAAb,CAAV;AACD;AACF;;AACDA,IAAAA,UAAU;AACX,GAtBD;AAwBAd,EAAAA,MAAM,CAACsB,OAAP,CAAe,sBAAf,EAAuC,eAAvC,EA9BI,CA+BJ;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAED,CAvDD;;AAyDA,eAAerB,cAAf","sourcesContent":["var WebSocketClient = require('websocket').client;\n\nvar client = new WebSocketClient();\n\n\n\n\nconst webSocketSetup = async ({\n  text,\n  currencyPair,\n  callBack\n}) => {\n\n  client.on('connectFailed', function (error) {\n    console.log('Connect Error: ' + error.toString());\n  });\n\n  client.on('connect', function (connection) {\n    console.log('WebSocket Client Connected');\n    connection.on('error', function (error) {\n      console.log(\"Connection Error: \" + error.toString());\n    });\n    connection.on('close', function () {\n      console.log('echo-protocol Connection Closed');\n    });\n    connection.on('message', function (message) {\n      if (message.type === 'utf8') {\n        console.log(\"Received: '\" + message.utf8Data + \"'\");\n      }\n    });\n\n    function sendNumber() {\n      if (connection.connected) {\n        var number = Math.round(Math.random() * 0xFFFFFF);\n        connection.sendUTF(number.toString());\n        setTimeout(sendNumber, 1000);\n      }\n    }\n    sendNumber();\n  });\n\n  client.connect('ws://localhost:8080/', 'echo-protocol');\n  // console.log(text, currencyPair);\n\n  // let ws = new WebSocket('wss://ws.bitstamp.net/');\n\n  // ws.onopen = () => {\n  //   //Subscribe to the channel\n  //   ws.send(JSON.stringify({ event: `bts:${text}`, data: { channel: `order_book_${currencyPair}` } }))\n  // }\n\n  // ws.onmessage = (msg) => {\n  //   console.log(msg, '=============>');\n\n  //   // callBack && callBack(JSON.parse(msg.data));\n  // }\n\n\n  // ws.onerror = error => {\n  //   console.log(`WebSocket error: ${error}`)\n  // }\n\n}\n\nexport default webSocketSetup;\n\n"]},"metadata":{},"sourceType":"module"}